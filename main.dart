import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';
import 'firebase_options.dart'; // Generated by FlutterFire CLI

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Firebase Sensor Data',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SensorDataPage(),
    );
  }
}

class SensorDataPage extends StatefulWidget {
  @override
  _SensorDataPageState createState() => _SensorDataPageState();
}

class _SensorDataPageState extends State<SensorDataPage> {
  final DatabaseReference _dbRef = FirebaseDatabase.instance.ref("sensor_data");
  List<Map<String, dynamic>> _sensorData = [];

  @override
  void initState() {
    super.initState();
    _fetchSensorData();
  }

  void _fetchSensorData() {
    _dbRef.onValue.listen((event) {
      // Safely handle the snapshot value
      final Object? snapshotValue = event.snapshot.value;

      if (snapshotValue == null) {
        setState(() {
          _sensorData = [];
        });
        return;
      }

      // Cast snapshot value to Map
      final data = snapshotValue as Map<dynamic, dynamic>;
      final List<Map<String, dynamic>> loadedData = [];

      data.forEach((key, value) {
        final sensorRecord = Map<String, dynamic>.from(value as Map);
        loadedData.add(sensorRecord);
      });

      // Sort the data by timestamp (latest first)
      loadedData.sort((a, b) {
        final dateA = DateTime.parse(a['timestamp']);
        final dateB = DateTime.parse(b['timestamp']);
        return dateB.compareTo(dateA); // Sort by descending order
      });

      setState(() {
        _sensorData = loadedData;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sensor Data'),
      ),
      body: _sensorData.isEmpty
          ? Center(child: CircularProgressIndicator())
          : ListView.builder(
              itemCount: _sensorData.length,
              itemBuilder: (context, index) {
                final data = _sensorData[index];
                return Card(
                  margin: EdgeInsets.all(10),
                  child: ListTile(
                    title: Text('Temperature: ${data['temperature']}Â°C'),
                    subtitle: Text('Humidity: ${data['humidity']}%\n'
                        'Timestamp: ${data['timestamp']}'),
                  ),
                );
              },
            ),
    );
  }
}
